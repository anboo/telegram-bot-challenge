// Code generated by MockGen. DO NOT EDIT.
// Source: db/users.go

// Package tests is a generated GoMock package.
package tests

import (
	db "awesomeProject/db"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsersRepository is a mock of UsersRepository interface.
type MockUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryMockRecorder
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
	mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
	mock := &MockUsersRepository{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
	return m.recorder
}

// FindUserInChat mocks base method.
func (m *MockUsersRepository) FindUserInChat(ctx context.Context, userId, chatId string) *db.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserInChat", ctx, userId, chatId)
	ret0, _ := ret[0].(*db.User)
	return ret0
}

// FindUserInChat indicates an expected call of FindUserInChat.
func (mr *MockUsersRepositoryMockRecorder) FindUserInChat(ctx, userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserInChat", reflect.TypeOf((*MockUsersRepository)(nil).FindUserInChat), ctx, userId, chatId)
}

// FindUsernamesInChat mocks base method.
func (m *MockUsersRepository) FindUsernamesInChat(ctx context.Context, chatId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsernamesInChat", ctx, chatId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsernamesInChat indicates an expected call of FindUsernamesInChat.
func (mr *MockUsersRepositoryMockRecorder) FindUsernamesInChat(ctx, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsernamesInChat", reflect.TypeOf((*MockUsersRepository)(nil).FindUsernamesInChat), ctx, chatId)
}

// InsertNewUser mocks base method.
func (m *MockUsersRepository) InsertNewUser(ctx context.Context, userId, chatId, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUser", ctx, userId, chatId, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertNewUser indicates an expected call of InsertNewUser.
func (mr *MockUsersRepositoryMockRecorder) InsertNewUser(ctx, userId, chatId, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUser", reflect.TypeOf((*MockUsersRepository)(nil).InsertNewUser), ctx, userId, chatId, username)
}
