// Code generated by MockGen. DO NOT EDIT.
// Source: client/telegram.go

// Package tests is a generated GoMock package.
package tests

import (
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockTelegramClient is a mock of TelegramClient interface.
type MockTelegramClient struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramClientMockRecorder
}

// MockTelegramClientMockRecorder is the mock recorder for MockTelegramClient.
type MockTelegramClientMockRecorder struct {
	mock *MockTelegramClient
}

// NewMockTelegramClient creates a new mock instance.
func NewMockTelegramClient(ctrl *gomock.Controller) *MockTelegramClient {
	mock := &MockTelegramClient{ctrl: ctrl}
	mock.recorder = &MockTelegramClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegramClient) EXPECT() *MockTelegramClientMockRecorder {
	return m.recorder
}

// GetAPI mocks base method.
func (m *MockTelegramClient) GetAPI() *tgbotapi.BotAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPI")
	ret0, _ := ret[0].(*tgbotapi.BotAPI)
	return ret0
}

// GetAPI indicates an expected call of GetAPI.
func (mr *MockTelegramClientMockRecorder) GetAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPI", reflect.TypeOf((*MockTelegramClient)(nil).GetAPI))
}

// SendMessage mocks base method.
func (m *MockTelegramClient) SendMessage(update tgbotapi.Update, text string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", update, text)
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTelegramClientMockRecorder) SendMessage(update, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTelegramClient)(nil).SendMessage), update, text)
}
