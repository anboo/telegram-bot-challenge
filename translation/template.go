package translation

import "strings"

var templates = map[string]map[string]string{
	RU: {
		HelloStartMessage:           "–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∏–≥—Ä–µ –≤—ã–∑–æ–≤–∏ /reg –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –¥–Ω—è –≤—ã–∑–æ–≤–∏ /challenge",
		ChallengeMessage:            "ü§°ü§°ü§° –ò—Ç–∞–∫, –Ω–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å %name% –¥–Ω—è –≤ %chatName%",
		ErrorMessage:                "ü§°ü§°ü§° %name% –¥–Ω—è - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á—É—Ç—å –ø–æ–∑–∂–µ...",
		MaxPlayersMessage:           "ü§° –î–ª—è –≤—ã–±–æ—Ä–∞ %name% –¥–Ω—è –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –±—ã–ª–æ –Ω–µ –º–µ–Ω—å—à–µ 2 –∏–≥—Ä–æ–∫–æ–≤",
		ResultMessage:               "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!!! ü§°ü§°ü§° –¢—ã %name% –¥–Ω—è, @%username%",
		YouAlreadyRegisteredMessage: "üóøüóøüóø –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∏–≥—Ä–µ",
		InternalError:               "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
		YouExited:                   "%username%, –±–æ–ª—å—à–µ —Ç—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∏–≥—Ä–µ!",
		YouRegistered:               "ü§° –ü—Ä–∏–≤–µ—Ç, %username%. –¢–µ–ø–µ—Ä—å —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∏–≥—Ä–µ!",
	},
}

type Translation struct {
	templates     map[string]map[string]string
	defaultLocale string
}

func NewTranslationWithDefault() *Translation {
	return &Translation{templates: templates}
}

func NewTranslation(templates map[string]map[string]string) *Translation {
	return &Translation{templates: templates}
}

func (t *Translation) Trans(locale string, code string, args *map[string]string) string {
	v, ok := t.templates[locale]

	if !ok && t.defaultLocale != "" && t.defaultLocale != locale {
		locale = t.defaultLocale
	}

	val, ok := v[code]
	if !ok {
		return ""
	}

	if args != nil {
		for transKey, transVal := range *args {
			val = strings.Replace(val, "%"+transKey+"%", transVal, 1)
		}
	}

	return val
}
